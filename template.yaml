AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
Description: Compose Backend
Metadata:
  AWS::ServerlessRepo::Application:
    Name: compose-backend
    Description: Compose Backend
    Author: Justin Menga
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ["compose-backend", "cloudformation"]
    HomePageUrl: https://github.com/compose-run/compose-backend
    SemanticVersion: 0.1.0
    SourceCodeUrl: https://github.com/compose-run/compose-backend

# Stack inputs
Parameters:
  MemorySize:
    Type: Number
    Description: Function Memory
    Default: 1769
    MinValue: 128
    MaxValue: 3008
  Runtime:
    Type: String
    Description: Lambda runtime
    Default: nodejs14.x
  Timeout:
    Type: Number
    Description: Function Timeout
    Default: 900
  LogRetention:
    Type: Number
    Description: Log Retention
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]

# Global settings
Globals:
  Function:
    AutoPublishAlias: latest
    MemorySize: !Ref MemorySize
    Runtime: !Ref Runtime
    Timeout: !Ref Timeout
    Tracing: Active
    Layers:
      - !Ref Dependencies

Resources:
  # Dependencies Layer
  Dependencies:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      LayerName: !Sub ${AWS::StackName}-dependencies
      Description: !Sub ${AWS::StackName} dependencies
      ContentUri: ./
      CompatibleRuntimes:
        - !Ref Runtime
      LicenseInfo: MIT
      RetentionPolicy: Delete
  # Rest API
  RestApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1
  # State Function
  StateFunction:
    Type: AWS::Serverless::Function
    DependsOn: StateFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-state-function
      Description: !Sub ${AWS::StackName} State Function
      Handler: state.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
      Events:
        GetState:
          Type: HttpApi
          Properties:
            ApiId: !Ref RestApi
            Method: GET
            Path: /state/{name}
        PutState:
          Type: HttpApi
          Properties:
            ApiId: !Ref RestApi
            Method: PUT
            Path: /state/{name}
  StateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-state-function
      RetentionInDays: !Ref LogRetention
  # DynamoDB
  ApplicationDatabase:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-db
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      GlobalSecondaryIndexes:
        - IndexName: !Sub ${AWS::StackName}-gsi1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-db
  # DynamoDB Stream Function
  ApplicationDatabaseStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt ApplicationDatabase.StreamArn
      FunctionName: !Sub ${ApplicationDatabaseStreamFunction.Alias}
      StartingPosition: LATEST
  ApplicationDatabaseStreamFunction:
    Type: AWS::Serverless::Function
    DependsOn: ApplicationDatabaseStreamFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-stream-function
      Description: !Sub ${AWS::StackName} Application Database Stream Function
      Handler: stream.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
        - DynamoDBStreamReadPolicy:
            TableName:
              !Select [1, !Split ["/", !GetAtt ApplicationDatabase.StreamArn]]
            StreamName:
              !Select [3, !Split ["/", !GetAtt ApplicationDatabase.StreamArn]]
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  ApplicationDatabaseStreamFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-stream-function
      RetentionInDays: !Ref LogRetention
  # Websockets API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-websockets
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${WebSocketConnectIntegration}
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub ${AWS::StackName} websockets connect integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Alias}/invocations
  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${WebSocketDisconnectIntegration}
  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub ${AWS::StackName} websockets disconnect integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Alias}/invocations
  WebSocketSubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: subscribe
      AuthorizationType: NONE
      OperationName: Subscribe
      Target: !Sub integrations/${WebSocketSubscribeIntegration}
  WebSocketSubscribeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub ${AWS::StackName} websockets subscribe integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketSubscribeFunction.Alias}/invocations
  WebSocketUnsubscribeRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: unsubscribe
      AuthorizationType: NONE
      OperationName: Unsubscribe
      Target: !Sub integrations/${WebSocketUnsubscribeIntegration}
  WebSocketUnsubscribeIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub ${AWS::StackName} websockets unsubscribe integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketUnsubscribeFunction.Alias}/invocations
  WebSocketUpdateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: update
      AuthorizationType: NONE
      OperationName: Update
      Target: !Sub integrations/${WebSocketUpdateIntegration}
  WebSocketUpdateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub ${AWS::StackName} websockets update integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketUpdateFunction.Alias}/invocations
  WebSocketMagicLinkAuthenticateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: magic-link-authenticate
      AuthorizationType: NONE
      OperationName: MagicLinkAuthenticate
      Target: !Sub integrations/${WebSocketMagicLinkAuthenticateIntegration}
  WebSocketMagicLinkAuthenticateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: !Sub ${AWS::StackName} websockets magic-link-authenticate integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMagicLinkAuthenticateFunction.Alias}/invocations
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketSubscribeRoute
      - WebSocketUnsubscribeRoute
      - WebSocketUpdateRoute
      - WebSocketMagicLinkAuthenticateRoute
      - WebSocketDisconnectRoute
    Properties:
      ApiId: !Ref WebSocketApi
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: v1
      Description: v1 Stage
      DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi
  # Websocket Connect Function
  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    DependsOn: WebSocketConnectFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket-connect
      Description: !Sub ${AWS::StackName} Websocket Connect
      Handler: connect.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${WebSocketConnectFunction.Alias}
      Principal: apigateway.amazonaws.com
  WebSocketConnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-websocket-connect
      RetentionInDays: !Ref LogRetention
  # Websocket Disconnect Function
  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    DependsOn: WebSocketDisconnectFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket-disconnect
      Description: !Sub ${AWS::StackName} Websocket Disconnect
      Handler: disconnect.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${WebSocketDisconnectFunction.Alias}
      Principal: apigateway.amazonaws.com
  WebSocketDisconnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-websocket-disconnect
      RetentionInDays: !Ref LogRetention
  WebSocketSubscribeFunction:
    Type: AWS::Serverless::Function
    DependsOn: WebSocketSubscribeFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket-subscribe
      Description: !Sub ${AWS::StackName} Websocket Subscribe
      Handler: subscribe.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
        - Version: "2012-10-17"
          Statement:
            - Sid: InvokeApi
              Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  WebSocketSubscribePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${WebSocketSubscribeFunction.Alias}
      Principal: apigateway.amazonaws.com
  WebSocketSubscribeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-websocket-subscribe
      RetentionInDays: !Ref LogRetention
  WebSocketUnsubscribeFunction:
    Type: AWS::Serverless::Function
    DependsOn: WebSocketUnsubscribeFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket-unsubscribe
      Description: !Sub ${AWS::StackName} Websocket Unsubscribe
      Handler: unsubscribe.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
        - Version: "2012-10-17"
          Statement:
            - Sid: InvokeApi
              Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  WebSocketUnsubscribePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${WebSocketUnsubscribeFunction.Alias}
      Principal: apigateway.amazonaws.com
  WebSocketUnsubscribeFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-websocket-unsubscribe
      RetentionInDays: !Ref LogRetention
  WebSocketUpdateFunction:
    Type: AWS::Serverless::Function
    DependsOn: WebSocketUpdateFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket-update
      Description: !Sub ${AWS::StackName} Websocket Update
      Handler: update.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
        - Version: "2012-10-17"
          Statement:
            - Sid: InvokeApi
              Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  WebSocketUpdatePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${WebSocketUpdateFunction.Alias}
      Principal: apigateway.amazonaws.com
  WebSocketUpdateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-websocket-update
      RetentionInDays: !Ref LogRetention
  WebSocketMagicLinkAuthenticateFunction:
    Type: AWS::Serverless::Function
    DependsOn: WebSocketMagicLinkAuthenticateFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocket-magic-link-authenticate
      Description: !Sub ${AWS::StackName} Websocket MagicLinkAuthenticate
      Handler: magic-link-authenticate.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref ApplicationDatabase
        - Version: "2012-10-17"
          Statement:
            - Sid: InvokeApi
              Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ApplicationDatabase
          DYNAMODB_GSI1_INDEX: !Sub ${AWS::StackName}-gsi1
  WebSocketMagicLinkAuthenticatePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${WebSocketMagicLinkAuthenticateFunction.Alias}
      Principal: apigateway.amazonaws.com
  WebSocketMagicLinkAuthenticateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-websocket-magic-link-authenticate
      RetentionInDays: !Ref LogRetention
  # Serverless API
  SampleApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1
  # Serverless Function
  SampleFunction:
    Type: AWS::Serverless::Function
    DependsOn: SampleFunctionLogGroup
    Properties:
      FunctionName: !Sub ${AWS::StackName}-sample-app
      Description: !Sub ${AWS::StackName} Compose Backend
      Handler: app.handler
      CodeUri: ./dist
      Policies:
        - AWSXrayWriteOnlyAccess
        - Version: "2012-10-17"
          Statement:
            - Sid: ExamplePermissions
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: "*"
      Events:
        Get:
          Type: HttpApi
          Properties:
            ApiId: !Ref SampleApi
            Method: GET
            Path: /{host}
  SampleFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-sample-app
      RetentionInDays: !Ref LogRetention

Outputs:
  ApplicationDatabase:
    Description: Application Database
    Value: !Ref ApplicationDatabase
  RestApi:
    Description: REST API Gateway Endpoint
    Value: !Sub ${RestApi.ApiEndpoint}/v1
  WebSocketApi:
    Description: Websocket API Gateway Endpoint
    Value: !Sub ${WebSocketApi.ApiEndpoint}/${WebSocketStage}
  SampleApi:
    Description: API Gateway Endpoint
    Value: !Sub ${SampleApi.ApiEndpoint}/v1
  SampleFunctionAlias:
    Description: Sample Function Alias
    Value: !Sub ${SampleFunction.Alias}
